[{"path":"/.DS_Store","title":"","date":"","content":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000rnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0003\u0000c\u0000l\u0000ivSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000c\u0000o\u0000m\u0000p\u0000o\u0000n\u0000e\u0000n\u0000t\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000c\u0000o\u0000r\u0000evSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000f\u0000e\u0000a\u0000t\u0000u\u0000r\u0000e\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000f\u0000g\u0000e\u0000t\u0000t\u0000i\u0000n\u0000g\u0000-\u0000s\u0000t\u0000a\u0000r\u0000t\u0000e\u0000dvSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000r\u0000e\u0000s\u0000o\u0000u\u0000r\u0000c\u0000e\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000t\u0000u\u0000t\u0000o\u0000r\u0000i\u0000a\u0000l\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000u\u0000t\u0000i\u0000l\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\t\u0000w\u0000o\u0000r\u0000d\u0000p\u0000r\u0000e\u0000s\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0002\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","id":0},{"path":"/documentation/cli/introduction","title":"Introduction","weight":"80","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: CLI","    identifier":"   identifier: cli-introduction","    weight":"   weight: 80","content":"\nWhat is the Flynt CLI?\n\nFlynt CLI makes working with Flynt simple and quick. It contains commands that cover setting up Wordpress, installing the theme, synchronizing databases, and handling deployment.\n\n Install\n\nTo install Flynt CLI with npm, run:\n\nnpm install flynt-cli -g\n\nCommands\n\nFor a list of all available commands run:\nflynt --help\n\n Setup\nSetup a new flynt project.\n\nflynt setup\n\nRun flynt setup --help to see all of the available commands:\n\ninstallBedrock - Installs roots Bedrock.\nrequireComposerPackages - Installs external dependencies via Composer.\nsetupTheme -  Clones the Flynt theme and runs Yarn to install theme dependencies.\ninitGitRepo - Initializes new git repo.\ncreateDb - Creates a new database and user on localhost.\nsetupWordpress - Runs through Wordpress core setup, creates Wordpress salts.\nactivateWordpress - Activates the Flynt theme.\n\nClone\nClone database and media files between environments.\n\nflynt clone\n\n Deploy\nDeploy source code from local to any environment.\n\nflynt deploy\n","id":1},{"path":"/documentation/components/assets","title":"\"Assets\"","weight":"31","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 31","content":"\nAll assets (scripts, styles, and images, and SVGs) of a component should be contained within the individual component folder.\n\nImages and SVGs should be placed into the assets folder:\n\n  ExampleComponent/\n  ├── assets/\n  |   ├── exampleImage.jpg\n  |   └── exampleIcon.svg\n\nCompiling Assets\n\nWhen gulp is running, excluding Javascript and Stylus files, all other files within the Components folder will be directly copied to the dist folder.\n\nAll stylus files, with the exception of partials, will be piped through Autoprefixer and then compiled into the dist folder as CSS. Learn more about component styles here.\n\nJavascript files with the following file names only will be compiled to the dist folder using Babel:\n\nscript.js\nauth.js\nadmin.js\n\nLearn more about component scripts here.\n\nassets live at component level\nsame as components/readme.md section\nhow to use utils/asset or link to it.\nusing assets in CSS\nhow to include static images (needs to be tested in flynt we dunno how that works best)\nhow to include svgs\nhow to use background images\n","id":2},{"path":"/documentation/components/custom-data","title":"Custom Data","weight":"32","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 32","content":"\n!-- TODO: Section explaining ACF custom data. --\n\nwhat custom data is\nwhat custom data is FOR (use cases?)\nexamples\n","id":3},{"path":"/documentation/components/dynamic-subcomponents","title":"Dynamic Sub-Components","weight":"33","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 33","content":"\n!-- TODO: Test priority of filters < 999. --\n\nThe Flynt/dynamicSubcomponents filter allows a component to dynamically create new areas with components within them. Components can be added to the new area with exactly the same configuration options as with Flynt page templates. For example:\n\n<?php\nadd_filter('Flynt/dynamicSubcomponents?name=ParentComponent', function ($areas)\n , 10);\n\nIt is also possible to access the $data and $parentData of the component that the filter is applied to. This is useful if, for example, you need to dynamically load components of an ACF flexible content field group:\n\n<?php\nadd_filter('Flynt/dynamicSubcomponents?name=FlexibleContent', function ($areas, $data, $parentData)  , $parentData['post']-fields[$data['fieldGroup']]);\n     \n    return $areas;\n , 10, 3);\n","id":4},{"path":"/documentation/components/fields","title":"Fields","weight":"34","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 34","content":"\nField functionality is provided by ACF plugin. This is required for fields to work.\nFields are authored in .json\ncan use all same options as on acf documentation (link to the docs here)\ntheres lots of different field types. the sub pages in this section show how to use key field types\n\n<!-- TODO: Describe this link:\nhttps://www.advancedcustomfields.com/resources/register-fields-via-php/ --\n\nUsing Flexible Content with ACF Pro\n\ndiv class=\"alert alert-info\"\n  pstrongTo use the flexible content field you must have purchased and installed the Advanced Custom Fields Pro plugin. a href=\"https://www.advancedcustomfields.com/pro/\"You can purchase this on the ACF website here./a/strong/p\n/div\n\nWe strongly recommend that you first learn how the dynamicSubcomponents filter works. Read more about this here \n\nTo quote the official ACF documentation:\n\n The Flexible content field acts as a blank canvas to which you can add an unlimited number of layouts with full control over the order.\n\nYou can read more here.\n\nWith Flynt, this field is truly powerful when we consider that every component can be registered as a separate flexible content layout. The user will then be free to drag and drop each component on their page to create their own unique layouts. Since every component is self-contained, the final output order on the front-end is irrelevant (in almost all cases).\n\n Create a Flexible Content template\nhow to add to config\n\nCreate Demo Modules\ndemo with a few modules\n\n Using Repeaters with ACF Pro\n\ndiv class=\"alert alert-info\"\n  pstrongTo use repeater fields you must have purchased and installed the Advanced Custom Fields Pro plugin. a href=\"https://www.advancedcustomfields.com/pro/\"You can purchase this on the ACF website here./a/strong/p\n/div\n\nThe repeater field is a wrapper for a group of sub fields, so that mulitple rows of data of the same format can be easily looped over. To see the full functionality of the repeater field in detail, read through the official ACF documentation on repeaters.\n\nTo demonstrate, lets make a new component named ImageTextList.\n\nCreate Components/ImageTextList/fields.json and register a new repeater field:\n\n \n  ]\n \n\nNow register two sub-fields for the repeater, Image and Content:\n\n ,\n         \n      ]\n     \n  ]\n \n\nAdd the component to the default pageComponents field group and check-out the repeater in the back-end. As you can see, the user is free to add and remove new rows as they wish - each containing an image and a content field.\n\nCreate Components/ImageTextList/index.twig and enter the following:\n\ndiv is=\"flynt-image-text-list\"\n   \n    div class=\"item\"\n      img src=\"  \" alt=\"  \"\n        \n    /div\n   \n/div\n\nHere we can loop through each entry within the repeater, outputting the same layout for each item. That's it! Repeaters provide a great, simple method for the user to add and display similar data again and again.\n\nOptions Pages\n\ndiv class=\"alert alert-info\"\n  pstrongTo use options pages you must have purchased and installed the Advanced Custom Fields Pro plugin. a href=\"https://www.advancedcustomfields.com/pro/\"You can purchase this on the ACF website here./a/strong/p\n/div\n\nThis section is coming soon!\n","id":5},{"path":"/documentation/components/functions","title":"Functions","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 35","content":"\nFlynt implements the Wordpress functions.php concept at component level. Each component can have a functions.php file. This file serves two main purposes:\n\nEnqueue assets and dependencies.\nAdd additional data to the component before it is rendered.\n\nAs with styles and scripts, keeping this logic separated at a component level ensures the component is quick to understand and simple to reuse.\n\nNamespace\n\nThe functions.php file must always begin by defining the component namespace. This is Flynt\\Components, followed by the component name.\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponentName;\n\n Enqueueing Assets and Dependencies\nThe main style.css and script.js files of a component can be enqueued using the Flynt Component feature within the wpenqueuescripts action.\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponentName;\n\nuse Flynt\\Features\\Components\\Component;\n\naddaction('wpenqueue_scripts', function ()\n );\n\nThis will enqueue Components/ExampleComponentName/style.css and Components/ExampleComponentName/script.js.\n\nIt is also possible to pass script and style dependencies to enqueueAssets.\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponentName;\n\nuse Flynt\\Features\\Components\\Component;\n\naddaction('wpenqueue_scripts', function ()\n );\n\nThis will look for dist/vendor/slick.js and dist/vendor/slick.css and enqueue the files if found. Never add files manually to the dist folder. To compile dependencies into the dist/vendor folder, see the section on copying vendor files here.\n\nUsing Filters\nThe two main filters you will use inside functions.php are Flynt/addComponentData and Flynt/dynamicSubcomponents.\n\n Flynt/addComponentData\nThis filter can be used to add to or modify your component's data before it is passed to the view and rendered. This can be used, for example, to fetch and pass posts from a custom post type:\n\n<?php\n\nnamespace Flynt\\Components\\ListLatestProducts;\n\nuse Timber\\Timber;\n\nadd_filter('Flynt/addComponentData?name=ListLatestProducts', function ($data)\n );\n\nThis data is then available in the view template for ListLatestProducts.\n\ndiv is=\"flynt-list-latest-products\" class=\"flyntComponent\"\n  ul class=\"productList\"\n     \n      li class=\"productList-item\"\n        h3  /h3\n      /li\n     \n  /ul\n/div\n\nFlynt/dynamicSubcomponents\nWith this filter, it is possible to dynamically add additional areas and components within your parent component. To learn how to use this in detail, go to the section on dynamicSubcomponents.\n\n Using Features and Utils\n\nFlynt comes with a range of features and utility functions. To use any of them within a component, you must only use the feature or utility at the top of the functions.php file, below the component namespace.\n\nFeatures are always namespaced with Flynt\\Features.\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponentName;\n\nuse Flynt\\Features\\Components\\Component;\n\nUtils are always namespaced with Flynt\\Util.\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponentName;\n\nuse Flynt\\Utils\\Log;\n\nadd_filter('Flynt/addComponentData?name=ExampleComponentName', function ($data)\n );\n","id":6},{"path":"/documentation/components/introduction","title":"Introduction","weight":"30","aliases":"","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 30","content":"\nA component is a self-contained building-block. Each component has its own scope. As such, each component is kept within its own folder which contains everything it requires; the layout, the back-end field setup, all necessary Wordpress filter and hook logic, scripting, styles, and images.\n\n  ExampleComponent/\n  ├── assets/\n  |   ├── exampleImage.jpg\n  |   └── exampleIcon.svg\n  ├── fields.json\n  ├── functions.php\n  ├── index.twig\n  ├── README.md\n  ├── script.js\n  ├── style.styl\n\nBuilding components is a sustainable process, meaning every component you develop can be reused within a project, or in another; increasing your head-start with every new Flynt project.\n\nAreas\nSince components are self-contained, areas provide a way to stack our building-blocks together. An area is simply a location within a component where it is possible to add other components.\n","id":7},{"path":"/documentation/components/scripts","title":"Scripts","weight":"36","menu":"menu:","  main":" main:","    parent":"   parent: Components","    name":"   name: Scripts","    weight":"   weight: 36","content":"\nTo add scripts to a component, create a script.js file within the individual component folder. This file will be automatically compiled to the dist folder using Babel.\n\nIn this file, you can write your scripts however you wish. Flynt does not enforce any further requirements on your scripts. However, we strongly recommend using Custom Elements.\n\nAdd Dependencies\n\nThird party dependencies must be copied to the dist folder before they can be enqueued. This is done within the script of the component, using Webpack File Loader.\n\nAt the top of the component script, a file can be imported in the following format:\n\nimport file-loader?name=vendor/$ !$ '\n\nFor example:\n\nimport 'file-loader?name=vendor/slick.js!slick-carousel/slick/slick.min'\nimport 'file-loader?name=vendor/slick.css!csso-loader!slick-carousel/slick/slick.css'\n\n Custom Elements\n\nTo quote the Google primer on Custom Elements:\n\n With Custom Elements, web developers can create new HTML tags, beef-up existing HTML tags, or extend the components other developers have authored. The API is the foundation of web components. It brings a web standards-based way to create reusable components using nothing more than vanilla JS/HTML/CSS. The result is less code, modular code, and more reuse in our apps.\n\nWe highly recommend reading through the full Custom Elements primer on Google's Web Fundamentals.\n\nBy default, to provide sufficient cross-browser support for custom elements, Flynt implements a polyfill within the DocumentDefault component.\n\nThe is attribute\n\nIn the view template, the is attribute is used to declare a component as a custom element. This means we are able to extend native HTML elements (read more about this here). We are also able to use this attribute to scope our component styles.\n\ndiv is=\"flynt-example-component\" class=\"flyntComponent\"\n  pThis Example Component has an is attribute./p\n/div\n\n Custom Elements Template\n\nA basic custom elements script could look like this:\n\nclass ExampleComponent extends window.HTMLDivElement  \n\n  resolveElements ()  \n\n  connectedCallback ()  \n\n  openContent = (e) =  \n \n\nwindow.customElements.define('flynt-example-component', ExampleComponent,  )\n","id":8},{"path":"/documentation/components/styles","title":"Styles","weight":"37","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 37","content":"\nStyles\n\nEach component can have a style file. By default, Flynt supports vanilla CSS files, and the pre-processor Stylus.\n\nThe style file should be named style, and be placed within the individual component folder. This file will be automatically compiled to the dist folder in the same location.\n\nFor example: Components/ExampleComponent/style.styl compiles to dist/Components/ExampleComponent/style.css\n\nThis will not automatically enqueue the styles in the front-end. To do this, you must enqueue the files within the component's functions.php file. Learn how to do this here.\n\nIt is also possible to add support for other pre-processors with gulp. See an example of how to switch to SASS here.\n\n Flynt CSS Guidelines\n\nScope\nStyles should always be scoped to the component using the is attribute. This attribute is also used in the component script file.\n\nThe styles for a component should include all the essential styling a component needs to function correctly on its own. This includes setting the box-sizing property for your component.\n\n[is='flynt-example-component']\n  *,\n  *:before,\n  *:after\n    box-sizing: border-box\n\n  .exampleComponent\n    &-title\n      color: red\n\n MaintainableCSS\nAll components shipped with Flynt adhere to MaintainableCSS. MaintainableCSS helps writing modular and scalable CSS with maintainability in mind. We strongly recommend following this approach for all of your components.\n\nJeet\nIf using Stylus, you will have access to the Jeet grid system. Jeet is a powerful and flexible approach to creating grids with CSS.\n\n[is='flynt-example-component']\n  .exampleComponent\n    &-container\n      center(1400px, 15px)\n\n    &-content\n      column(2/3)\n\n    &-sidebar\n      column(1/3)\n\n Media Queries\nIf using Stylus, Flynt uses the Rupture utility for working with media queries.\n\nRupture must be provided a scale variable, which represents the scale of your site in slices:\n\nrupture.scale =        0        400px       600px      800px        1050px     1800px\n\n//                     └────┬────┘ └────┬────┘ └────┬────┘ └────┬────┘ └────┬────┘ └────┬────\n// Slice numbers:           1           2           3           4           5           6\nrupture.scale-names:       'xs'        's'         'm'         'l'         'xl'        'hd'\n\nThis scale can then be referenced with Rupture's +above, +below, and +between mixins.\n\nrupture.scale = 0 400px 600px 800px 1050px 1800px\n\n[is='flynt-example-component']\n  .exampleComponent\n    &-container\n      center($max-width: 1400px, $pad: 15px)\n\n    &-content\n      +above('m')\n        column(2/3)\n\n    &-sidebar\n      +above('m')\n        column(1/3)\n\n!-- TODO: Add section on using global variables  --\n","id":9},{"path":"/documentation/components/view-templates","title":"View Templates","weight":"38","menu":"menu:","  main":" main:","    parent":"   parent: Components","    weight":"   weight: 38","content":"\nTODO: add definition for view template that doesn't suck\nflynt takes the view - compiles to html and outputs\nthis is the V in MVC.\nmaybe put the index.twig example at the top of here, not at the bottom\n\nThe rendered view of a component is the \"view template\". View templates are written in Twig, and support everything provided additionally by Timber.\n\nThe template file for a component must be named index.twig.\n\nAll data passed to a component is readily available in the view. This data includes fields configured in the fields.json file of the component, plus data passed with the addComponentData filter.\n\nFor example, take a component named exampleComponent.\n\nIn functions.php:\n\n<?php\n\nnamespace Flynt\\Components\\ExampleComponent;\n\nadd_filter('Flynt/addComponentData?name=ExampleComponent', function ($data)\n );\n\nThis data is now available in index.twig:\n\ndiv is='flynt-example-component' class='flyntComponent'\n  h1  /h1\n/div\n\nIf Twig is not your preferred template language, it is possible to customize this with Flynt Core. You can read how to change the template language here.\n\n!-- - TODO: Talk about partials --\n","id":10},{"path":"/documentation/core/api","title":"API","weight":"73","menu":"menu:","  main":" main:","    parent":"   parent: Core","    weight":"   weight: 73","content":"\nFlynt (namespace)\n\nThis is the main namespace of the plugin. In your theme you should only need to call the functions contained in the namespace. The following public functions are available:\n\n initDefaults\nfunction initDefaults()\nInitializes a set of defaults used for regular setups.\n\nregisterComponent\nfunction registerComponent(string $componentName, string $componentPath = null)\nRegisters a component for later use. If no $componentPath is specified, the default will be taken.\n\nfunction registerComponents(array $components = [])\nRegisters an array of components for later use. The array can consist of component names only (as values), or with the component name as key and component path as value.\n\n (echo|get)HtmlFromConfig\nfunction echoHtmlFromConfig(array $config)\nfunction getHtmlFromConfig(array $config)\nReturn and optionally echo the HTML generated from processing a given configuration array.\n\n(echo|get)HtmlFromConfigFile\nfunction echoHtmlFromConfigFile(string $fileName)\nfunction getHtmlFromConfigFile(string $fileName)\nReturn and optionally echo the HTML generated from processing a given configuration file.\n\n ComponentManager (class)\n\nSingleton used internally to manage registered components.\n\ngetInstance (static)\nGet the singleton of the ComponentManager.\npublic static function getInstance()\n\n registerComponent\nRegister a component for later use.\npublic function registerComponent(string $componentName, string $componentPath = null)\n\ngetComponentFilePath\nGet the path to a component specific file.\npublic function getComponentFilePath(string $componentName, string $fileName = 'index.php')\n\n getAll\nGet all registered Components.\npublic function getAll()\n\nremoveAll\nRemove all registered Components.\npublic function removeAll()\n\n BuildConstructionPlan (class)\n\nUsed internally to create a complete construction plan from a minimal config.\n\nfromConfig (static)\n\nBuild the construction plan from a config array.\n\npublic static function fromConfig (array $config)\n\n fromConfigFile (static)\n\nBuild the construction plan from a config file. Uses filters Flynt/configPath and\nFlynt/configFileLoader to determine file path and loading logic.\n\npublic static function fromConfigFile (string $configFileName)\n\nRender (class)\n\nUsed internally to render a construction plan.\n\n fromConstructionPlan (static)\n\nRender HTML from a given construction plan.\n\npublic static function fromConstructionPlan (array $constructionPlan)\n\nWordPress Filters\n\n Flynt/componentPath\nModify the path of a component.\n\nArguments for callable:\ndl\n  dt$componentPath/dt\n  ddthe path of the component/dd\n\n  dt$componentName/dt\n  ddthe name of the component/dd\n/dl\n\nDefault:\nadd_filter('Flynt/componentPath', ['Flynt\\Defaults', 'setComponentPath'], 999, 2);\nnamespace Flynt;\nclass Defaults  \n    return $componentPath;\n   \n \nFlynt/configPath\nModify the path of the config files that can be specified in (echo|get)HtmlFromConfigFile\n\nArguments for callable:\ndl\n  dt$configPath/dt\n  ddthe path of the config file/dd\n\n  dt$configFileName/dt\n  ddthe name of the config file/dd\n/dl\n\nDefault:\nadd_filter('Flynt/configPath', ['Flynt\\Defaults', 'setConfigPath'], 999, 2);\nnamespace Flynt;\nclass Defaults  \n    return $configPath;\n   \n \n Flynt/configFileLoader\nModify the logic of loading a config file. Default loads json files. Can be used to load other formats like yaml.\n\nArguments for callable:\ndl\n  dt$config/dt\n  ddthe loaded config. null by default/dd\n\n  dt$configName/dt\n  ddthe path of the config file/dd\n\n  dt$configPath/dt\n  ddthe name of the config file/dd\n/dl\n\nDefault:\nadd_filter('Flynt/configFileLoader', ['Flynt\\Defaults', 'loadConfigFile'], 999, 3);\nnamespace Flynt;\nclass Defaults  \n    return $config;\n   \n \nFlynt/initComponentConfig\nModify the config unsed to build the construction plan.\n\nComponent specific filter: Flynt/initComponentConfig?name= \n Flynt/addComponentData\nFinal point to modify the data of a component. Called after the data filters and adding custom data. This is the default place to do data manipulation and preparation before passing it to the render function.\n\nComponent specific filter: Flynt/addComponentData?name= \n\nArguments for callable:\ndl\n  dt$data/dt\n  ddthe component's data that will be used for rendering/dd\n\n  dt$parentData/dt\n  ddthe component's parent's data/dd\n\n  dt$config/dt\n  ddentire config of the component/dd\n/dl\n\nExample:\nadd_filter('Flynt/addComponentData?name=PageHeader', function ($data, $parentData)  \n  return $data;\n , 10, 2);\nFlynt/dynamicSubcomponents?name= \nModify the component's areas. Can be used to dynamically add sub components based on data comming from the data filter.\n\nArguments for callable:\ndl\n  dt$areas/dt\n  ddthe rendered HTML/dd\n\n  dt$componentData/dt\n  ddthe component's data/dd\n\n  dt$parentData/dt\n  ddthe component's parent's data/dd\n/dl\n\nExample:\n\nadd_filter('Flynt/dynamicSubcomponents?name=FlexibleContent', function ($areas, $data, $parentData)  , $parentData[$data['fieldGroup']]);\n   \n  return $areas;\n , 10, 3);\n\n Flynt/renderComponent\nSpecify the way how components or a single component should be rendered.\n\nComponent specific filter: Flynt/renderComponent?name= \n\nArguments for callable:\ndl\n  dt$output/dt\n  ddthe rendered HTML/dd\n\n  dt$componentName/dt\n  ddthe name of the component/dd\n\n  dt$componentData/dt\n  ddthe component's data/dd\n\n  dt$areaHtml/dt\n  ddthe rendered HTML of the component's areas/dd\n/dl\n\nDefault:\nadd_filter('Flynt/renderComponent', ['Flynt\\Defaults', 'renderComponent'], 999, 4);\nnamespace Flynt;\nclass Defaults  \n    return $output;\n   \n \n\nActions\n\n Flynt/registerComponent\nExectuted when any or a specific component is registered. Can be used to load additional files.\n\nComponent specific action: Flynt/registerComponent?name= \n\nArguments for callable:\ndl\n  dt$componentPath/dt\n  ddthe path of the component/dd\n\n  dt$componentName*/dt\n  ddthe name of the component (*not available in component specific action)/dd\n/dl\n\nDefaults:\nadd_action('Flynt/registerComponent', ['Flynt\\Defaults', 'checkComponentFolder']);\nadd_action('Flynt/registerComponent', ['Flynt\\Defaults', 'loadFunctionsFile']);\nnamespace Flynt;\nclass Defaults   not found!\", EUSER_WARNING);\n     \n   \n  public static function loadFunctionsFile($componentPath)  \n   \n \n","id":11},{"path":"/documentation/core/concepts","title":"Concepts","weight":"71","menu":"menu:","  main":" main:","    parent":"   parent: Core","    weight":"   weight: 71","content":"\nMain principles\n\nThe main functionality of the Flynt Core can be seen as a HTML generator. Given a minimal configuration the Flynt Core plugin first creates a \"Construction Plan\" and then renders it.\n\n!-- TODO: Should then either explain the construction plan or link to the section where its explained, or they could think 'what the heck is the construction plan'...?  --\n\n Config\n\nThe starting point for the entire process is a configuration representing a component. Multiple components can then be nested through the use of areas.\n\nThe available properties are as follows:\n\n| Property | Description |\n| :------: | ----------- |\n| namebr(string) | (required) name of the component |\n| dataFilterbr(string) | a Wordpress filter that will be called to retrieve the component's data |\n| dataFilterArgsbr(array) | arguments to pass to the dataFilter |\n| customDatabr(array/object) | pass custom data to the component. When used with dataFilter on the same component, it will the data will be merged. When used alone it will replace the components data. |\n| parentDatabr(array/object) | replace parent data of a component (only relevant for advanced use cases) |\n| areasbr(array/object of arrays) | defines a component's child components grouped into named areas. The key is the area name, the value is an array of components. |\n\nBuild the construction plan\n\nFrom this configuration file, Flynt Core will then build a Construction Plan by recursively following the below steps:\n\nInitialize empty component data.  \n   $config['data'] is set to an empty array. This is the starting point for every creation. As such, you cannot pass data through the config directly. Use customData instead.\n\nSet parent data to either the *parentData* specified in the config, the component's parent's data, or an empty array.  \n   The parent data is passed to multiple filters that will be called later in the building process. It is determined either by parentData specified in the config or by the actual data from the component's parent. Can be an empty array.\n\nApply *dataFilter* with *dataFilterArgs* to component data.  \n   The first situation where data can be assigned to the component itself. A filter with the name passed to dataFilter will be applied with the initially empty component data and the dataFilterArgs. This can be an arbitrary name but we advice to namespace / prefix it with e.g. Flynt/DataFiltes/.\n\nMerge *customData* into component data.  \n   In order to add additional data or replace certain data retrieved by the dataFilter, customData can be added through the config. This will be merged with the existing component data.\n\nApply general filter Flynt/addComponentData.  \n   In the previous steps the component data was determined by values passed through the config. This filter is applied for every component. Every filter you add here will be applied to every component. This make it the designated place to add default data that you want to access in every component.\n\nApply component specific filter Flynt/addComponentData?name= .  \n   This filter targets a specific component specified by the componentName. It can be used to do some default data manipulation that is needed for rendering the component. Since no data logic should be added to a template (except simple loops or control statements) every preparation, formating, etc. should be done here. This filter will usually be added in a components function.php.\n\nApply component specific filter Flynt/dynamicSubcomponents?name= .  \n   This can be used to add sub components (components in an area) to a component. It is useful for adding a sub component based on data that comes from a data filter.\n\nDo the same for subcomponent specified in - and dynamically added to - *areas*.  \n   The final step for one component is doing the same construction logic for each of the component's area's sub components.\n\n Render construction plan\n\nThe construction plan contains all the information needed to be rendered. This recursive rendering can be summarized in the following steps:\n\nRender construction plan for areas  \n   The recursive rendering starts by traversing down the component's areas rendering each component and joining the components' rendering output to one HTML string for each area.\n\nApply general filter Flynt/renderComponent  \n   This filter is called for every component. This is the designated place to define general rendering rules like e.g. integrating a template engine.\n\nApply the component specific filter Flynt/renderComponent?name=   \n   This filter can be used to target component specific rendering.\n","id":12},{"path":"/documentation/core/customization","title":"Customization","weight":"72","menu":"menu:","  main":" main:","    parent":"   parent: Core","    weight":"   weight: 72","content":"\n\nChanging the Styling Language\n\nFlynt Theme supports Stylus and vanilla CSS by default, but we don't enforce this. You can easily switch your styling flavor with Gulp.\n\nUnfortunately, by changing from Stylus, you will lose the media query helper Rupture.\n\n Switching to Sass\nAs an example, this section will demonstrate how to use Sass, instead of Stylus.\n\n1\\. Install gulp-sass with yarn:\n\n    yarn add gulp-sass -D\n  \n2\\. Create gulpfile.js/tasks/sass.js and add the following code:  \n\n    const browserSync = require('browser-sync')\n  const changed = require('gulp-changed')\n  const gulp = require('gulp')\n  const path = require('path')\n  const sourcemaps = require('gulp-sourcemaps')\n  const sass = require('gulp-sass')\n  const gulpIf = require('gulp-if')\n\n  module.exports = function (config)  ))\n      .pipe(gulpIf(!isProduction, sourcemaps.write(config.sourcemaps)))\n      .pipe(gulp.dest(config.dest))\n      .pipe(browserSync.stream())\n     )\n   \n  \n3\\. In gulpfile.js/config.js, add a sass configuration to module.exports:\n    module.exports =  /**/style.scss',\n      './ /**/style.sass'\n    ],\n    //...\n   \n  \n4\\. In gulpfile.js/watch.js, add these files to be watched for changes:\n\n    module.exports = function (config)  )\n      //...\n     )\n    //...\n   \n  \n5\\. In gulpfile.js/webpack.config.js, add the following configuration for sass within the output object:\n\n    const output =  ,\n    plugins: //...\n   \n  \n  That's it! This will provide basic Sass support, along with Jeet Sass. As a next step, we would strongly recommend adding linting for Sass files, but this is not covered in this section.\n\nChanging Template Language\n\nWhilst the theme uses Twig as the default template language, this is not strictly enforced.\n\n PHP Templates\nTo use plain PHP, simply create index.php, rather than index.twig.\n\nThe data passed to a component is still available using the $data function. For example:\n\nTwig:\ndiv is=\"flynt-example-module\"\n  h1  /h1\n/div\n\n PHP:\ndiv is=\"flynt-example-module\"\n  h1?= $data('title') ?/h1\n/div\n\nOther Template Engines\nTo switch to another template engine, use the renderComponent filter provided by the Flynt Core plugin.\n\nAs an example, the below code demonstrates how to switch to Smarty for rendering your templates.\n\n<?php\nadd_filter('Flynt/renderComponent', function($output, $componentName, $componentData, $areaHtml)  , 10, 4);\n\nYour component data will now be available as usual in index.tpl:\n\ndiv is=\"flynt-example-module\"\n  h1 /h1\n/div\n","id":13},{"path":"/documentation/core/quick-start","title":"Quick Start","weight":"70","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: Core","    weight":"   weight: 70","content":"\nWhat is Flynt Core?\n\nThe Flynt Core plugin is the basic building block of the Flynt Framework. Flynt Core offers a small public interface in combination with a few WordPress hooks to achieve the main principles and ideas behind the framework.\n\n Getting Started\n\nGetting started with the Flynt Core plugin is a simple two step process:\n\nInstall the Flynt Core plugin into the standard Wordpress folder.\nActivate the plugin in the Wordpress Administration \"Plugins\" panel.\n\nThat's it!\n\nFirst steps\n\nThe simplest way of using Flynt Core can be demonstrated with the following Hello, world example:\n\nIn your theme's index.php add:\n\nFlynt\\echoHtmlFromConfig([\n  'name' = 'HelloWorld'\n]);\n\n...and to your theme's functions.php:\n\nadd_filter('Flynt\\renderComponent?name=HelloWorld', function ()  );\n\nThat's it! You have successfully used Flynt Core for the first time.\n\n Next steps\n\nWe can take this a step further by initializing the plugins defaults. This will:\nImplement the intended component structure.\nLoad additional component scripts.\nEnable PHP file rendering.\n\nTo do so, add the following line of code to your theme's functions.php:\n\nFlynt\\initDefaults();\n\nThis will add the following hooks:\n\nadd_filter('Flynt/configPath', ['Flynt\\Defaults', 'setConfigPath'], 999, 2);\nadd_filter('Flynt/configFileLoader', ['Flynt\\Defaults', 'loadConfigFile'], 999, 3);\nadd_filter('Flynt/componentPath', ['Flynt\\Defaults', 'setComponentPath'], 999, 2);\nadd_action('Flynt/registerComponent', ['Flynt\\Defaults', 'checkComponentFolder']);\nadd_action('Flynt/registerComponent', ['Flynt\\Defaults', 'loadFunctionsFile']);\nadd_filter('Flynt/renderComponent', ['Flynt\\Defaults', 'renderComponent'], 999, 4);\n\nIn summary, these hooks do the following:\nLoad config files from the ./config directory.\nParse .json config files.\nSet the component path to ./Components.\nRequire components to be registered.\nLoad ./Components/ /function.php from every registered component, if the file exists.\nRender ./Components/ /index.php and make view helper function $data and $area available.\n  $data is used to access the component's data in the view template.\n  $area is used to include the HTML of an area's components into the components template itself.\n","id":14},{"path":"/documentation/features/creating-features","title":"Creating Features","weight":"42","menu":"menu:","  main":" main:","    parent":"   parent: Features","    weight":"   weight: 42","content":"\nAdd functions.php\n\nThis is the only file a feature requires. The only additional requirement is to add the Flynt namespace:\n\n<?php\nnamespace Flynt\\Features\\ExampleFeature;\n\n// Add feature functionality here!\n\n Add a README.md\n\nFeatures should be easy to reuse and easy to understand. We strongly recommend adding a readme file for each feature you create. Include a short description of what the feature can do, and how to configure any options available.\n\n!-- TODO: Add/link example README template. --\n\nAdd Styles, Scripts, and Templates\nFeatures support the addition of styles, scripts, and templates. All file types supported within components (Stylus, CSS, JS, Twig, and PHP files) will also be compiled and built in exactly the same way for features.\n\n Add ACF Fields\nSometimes, a feature may need to add ACF fields to allow the user to configure the options from the back-end. Again, this works exactly as with components. Add fields.json to the feature, and then configure the ACF fields:\n\n \n  ]\n \n\n!-- TODO: Add link to snippets. --\n\na href=\"#add-link\" class=\"btn btn-primary\"You can read more on authoring ACF Fields here./a\n","id":15},{"path":"/documentation/features/hooking-into-features","title":"Hooking into Features","weight":"43","menu":"menu:","  main":" main:","    parent":"   parent: Features","    weight":"   weight: 43","content":"\nYou may wish to run additional logic after a feature is registered. This is possible with the Flynt\\registerFeature hook.\n\nAfter each feature is registered, the Flynt\\registerFeature action is fired:\n\n<?php\nadd_action('registerFeature', function ($feature, $options, $dir)  , 10, 3);\nIt is also possible to target a specific feature:\n\n<?php\nadd_action('registerFeature?name=CustomPostTypes', function ($feature, $options, $dir)  , 10, 3);\n","id":16},{"path":"/documentation/features/introduction","title":"Introduction","weight":"40","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: Features","    identifier":"   identifier: introduction-features","    weight":"   weight: 40","content":"\nWith Wordpress, it is easy to create one large functions.php file, crammed full of all the custom logic your theme may need. This can get messy. In Flynt, we split each piece of functionality into smaller, self-contained feature bundles.\n\nIn most cases, features add global hooks and filters that affect the project on a global level. With this in mind, each feature is built with \"drag and drop\" reusability in mind.\n\nFlynt comes with a core set of ready to go features:\n\ndiv class=\"alert alert-list\" data-markdown\nAcfbr\nLoad & configure ACF fields and field groups.\n\nAdminComponentPreviewbr\nShow screenshots of components in the WP back-end, and on the WP admin bar.\n\nAdminNoticesbr\nA wrapper around the WordPress admin notice functionality.\n\nCleanHeadbr\nClean-up the WP head markup.\n\nCleanRssbr\nImprove WP RSS feeds.\n\nComponentsbr\nRegister & configure Flynt Components.\n\nGoogleAnalyticsbr\nAdd the Google Analytics tracking script.\n\nJquerybr\nLoad jQuery from a CDN.\n\nMimeTypesbr\nAdd SVG support to the media gallery.\n\nNavigationbr\nRegister navigation menus.\n\nPasswordFormbr\nAdd the WP password form with twig templates.\n\nRemoveEditorbr\nRemove the_content() editor.\n\nTemplatesbr\nSet the config path for page templates.\n\nTimberLoaderbr\nEnable rendering with Timber/Twig.\n\nTinyMcebr\nClean-up the WP content editor toolbar.\n\nCustomPostTypesbr\nCreate custom post types with JSON config files.\n\nCustomTaxonomiesbr\nCreate custom taxonomies with JSON config files.\n/div\n","id":17},{"path":"/documentation/features/using-features","title":"Using Features","weight":"41","menu":"menu:","  main":" main:","    parent":"   parent: Features","    weight":"   weight: 41","content":"\nAll features are located in the Features folder and require a functions.php file.\n\nThere are only two steps to add a feature:\n\nAdd the feature to the Features folder.\nOpen lib\\Init.php, and enable the feature using addthemesupport in the initTheme function. For example:\n    function initTheme()  \n  \nThat's it. In this example, Flynt will now initialize Features\\AdminNotices\\functions.php on the aftersetuptheme hook. This hook is called during each page load, after the theme is initialized.\n\nIt is also possible to pass parameters to features in the addthemesupport function. For example:\n\naddthemesupport('flynt-acf', [\n  'FieldGroupComposer',\n  'OptionPages'\n]);\n\n!-- TODO: Add example for accessing these parameters within the feature. --\n","id":18},{"path":"/documentation/getting-started/setting-up-flynt","title":"Setting up Flynt","weight":"11","menu":"menu:","  main":" main:","    parent":"   parent: \"Getting Started\"","    weight":"   weight: 11","content":"\nRequirements\n\nBefore you can get started with Flynt, there are some requirements that need to be met on your local machine. To make things easier you can use tools such as Trellis or Scotchbox and skip directly to Creating a Flynt project. If you want to set up your environment manually, keep reading.\n\nThe following tools and versions are required for Flynt to work correctly. Other versions than the ones listed here are not explicitly tested and may or may not work with Flynt.\n\n Command Line\n\nThese tools must be available in your system's PATH environment.\n\n|                    Command Line Tool                    | Version |\n| ------------------------------------------------------- | ------- |\n| Node                             | = 6.0  |\n| Composer                    | = 1.2  |\n| Yarn*                           | = 0.21 |\n| PHPCS** | = 2.5  |\n\n\\*You can use npm as well, but Yarn is strongly recommended.  \n\\*\\*Not strictly required, but strongly recommended.\n\nServer\n\n|           Requirement           | Version |\n| ------------------------------- | ------- |\n| PHP          | = 5.6  |\n| MySQL | = 5.6  |\n\nAdditionally, you will need a way to manage your virtual host setup. This can be done either manually via a hosts file or with tools like Mamp Pro.\n\n Creating a Flynt project\n\nAs soon as you have your environment set up, follow the steps below to create a new Flynt project.\n\nUsing the command line, install the Flynt CLI:\n    yarn global add flyntwp/flynt-cli\n  \nRun the create command and follow the instructions:\n    flynt create\n  \nSet up the virtual host provided during step 2 and you're good to go!\n\n,\ndiv class=\"alert alert-info\"\n  strongQuestions?/strong\n  \n  pIf you are stuck or having issues setting Flynt up, feel free to check the a href=\"faq.md\"FAQ/a or a href=\"https://github.com/flyntwp/flynt-theme/issues\" target=\"_blank\"Github Issues/a for further assistance./p\n/div\n","id":19},{"path":"/documentation/getting-started/theme-structure","title":"Theme Structure","weight":"12","menu":"menu:","  main":" main:","    parent":"   parent: \"Getting Started\"","    weight":"   weight: 12","content":"\nThe Flynt Theme uses the following structure:\n\nflynt-theme/                     # → Root of the theme\n├── Components/                  # → All components\n├── config/                      # → WP/ACF Configuration\n│   ├── customPostTypes/         # → Configure custom post types\n│   ├── fieldGroups/             # → Configure ACF field groups\n│   ├── templates/               # → Page templates (JSON)\n├── dist/                        # → Built theme files (never edit)\n├── Features/                    # → All features\n├── gulpfile.js/                 # → Gulp tasks and setup\n│   ├── tasks/                   # → Individual gulp-tasks, e.g. webpack, stylus\n│   ├── config.js                # → Gulp config\n│   ├── index.js                 # → Load gulp tasks with config\n│   ├── webpack.config.js        # → Webpack config\n├── lib/                         # → Hold utils and setup features\n│   ├── Utils/                   # → Small utility functions\n│   ├── Bootstrap.php            # → Flynt Bootstrap\n│   ├── Init.php                 # → Setup theme, register features\n├── node_modules/                # → Node.js packages (never edit)\n├── templates/                   # → Page templates (PHP)\n├── .env                         # → Configures dev environment\n├── .flynt.json                  # → Configures Flynt\n├── .gitignore                   # → Files/Folders that will not be committed to Git.\n├── .stylintrc                   # → Define Stylus linting rules\n├── bower.json                   # → Bower dependencies\n├── composer.json                # → Composer dependencies\n├── composer.lock                # → Composer lock file (never edit)\n├── functions.php                # → Set template directory and load lib/Init.php\n├── index.php                    # → Theme entry point (never edit)\n├── package.json                 # → Node.js dependencies and scripts\n├── phpcs.ruleset.xml            # → Define PHP linting rules\n├── screenshot.png               # → Theme screenshot for WP admin\n├── style.css                    # → Required WordPress theme style file.\n├── yarn.lock                    # → Yarn lock file (never edit)\n\n","id":20},{"path":"/documentation/getting-started/what-is-flynt","title":"What is Flynt?","weight":"10","aliases":"","menu":"menu:","  main":" main:","    parent":"   parent: Getting Started","    name":"   name: What is Flynt?","    weight":"   weight: 10","content":"\nFlynt is a component based WordPress framework for development teams and their clients.\n\nPhilosophy\n!-- TODO: Write this section. --\n\n Ecosystem\n!-- TODO: Write this section. --\n\nResources / Next Steps\n!-- TODO: Write this section. --\n","id":21},{"path":"/documentation/utils/array-helpers","title":"Array Helpers","weight":"51","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    weight":"   weight: 51","content":"\ndiv class=\"alert alert-info\"\n  pstrongTo use a utility file, do not forget to include the codeuse/code statement at the top of the file in which you wish to use it. For example: codeuse Utils\\ArrayHelpers/code./strong/p\n/div\n\nArrayHelpers::isAssoc($array)\nReturns true if the passed array is associative.\n\n ArrayHelpers::objectToArray($array)\nConvert and return the passed object to an array.\n","id":22},{"path":"/documentation/utils/asset","title":"Asset","weight":"52","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    weight":"   weight: 52","content":"\ndiv class=\"alert alert-info\"\n  pstrongTo use a utility file, do not forget to include the codeuse/code statement at the top of the file in which you wish to use it. For example: codeuse Utils\\Asset/code./strong/p\n/div\n\nFor caching purposes, all static assets are automatically revisioned by gulp (for example, icon.svg → icon-d41d8cd98f.svg). As such, this file includes helper functions for retrieving revisioned files.\n\nAsset::requireUrl($asset)\nReturn a revisioned static asset URL.\n\n Asset::requirePath($asset)\nReturn a revisioned static asset path.\n","id":23},{"path":"/documentation/utils/feature","title":"Feature","weight":"53","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    weight":"   weight: 53","content":"\nFeature::init($feature, $dir, $options = [])\n\n Feature::getActiveFeatures()\n\nFeature::getOptions($feature)\n\n Feature::getDirectory($feature)\n\nFeature::setInitialFile($fileName)\n","id":24},{"path":"/documentation/utils/introduction","title":"Introduction","weight":"50","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    identifier":"   identifier: introduction-utils","    weight":"   weight: 50","content":"\nFiles within lib/Utils are small, single file utility classes.\n\n,\n!-- TODO: Discuss how detailed (and if they should exist) files for each util file should be. --\n","id":25},{"path":"/documentation/utils/log","title":"Log","weight":"54","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    weight":"   weight: 54","content":"\ndiv class=\"alert alert-info\"\n  pstrongTo use a utility file, do not forget to include the codeuse/code statement at the top of the file in which you wish to use it. For example: codeuse Utils\\Log/code./strong/p\n/div\n\nThe Log utility can be used to log data to various locations:\n\nLog::console($data)\nOutput the data to the console with console.log, along with the file this function was called from.\n\n Log::error($data)\nOutput the data to the console with console.error, along with the file this function was called from.\n\nLog::pp($data)\nOutput the data to the page using print_r, wrapped in pre tags, along with the location this function was called from.\n","id":26},{"path":"/documentation/utils/string-helpers","title":"String Helpers","weight":"55","menu":"menu:","  main":" main:","    parent":"   parent: Utils","    weight":"   weight: 55","content":"\ndiv class=\"alert alert-info\"\n  pstrongTo use a utility file, do not forget to include the codeuse/code statement at the top of the file in which you wish to use it. For example: codeuse Utils\\StringHelpers/code./strong/p\n/div\n\nStringHelpers::camelCaseToKebab($className)\nConverts a camelCaseString to a kebab-cased-string (lowercase, hyphenated).\n\n StringHelpers::trimStrip($str, $length = 25)\nTrims the given string to the specified length using wptrimwords and strips all tags with wpstripall_tags. An elipsis (...) is appended if the text is trimmed.\n\nStringHelpers::splitCamelCase($input)\n!-- TODO: Explain this function. --\n","id":27},{"path":"/documentation/wordpress/custom-post-types","title":"Custom Post Types","weight":"50","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: WordPress","    weight":"   weight: 50","content":"\nWith Flynt, custom post types can be created using the Custom Post Type feature.\n\nWith this feature, custom post types are created with JSON configuration files.\n\n1. Install the CustomPostType Feature\nDownload and place the feature into the Features folder and initialize it in the initTheme function in lib/Init.php:\n\n<?php\n\nfunction initTheme()  \n\nHere we pass two options:\ndir - the folder in which the configuration files are located\nfileName - the name of the configuration file that the feature will look for.\n\n 2. Create a post type\nEach custom post type requires a separate folder in the defined dir. Within this folder, it will look for a JSON file with the specified fileName (config.json).\n\nAs an example, create config\\customPostTypes\\products\\config.json. Within config.json, add the configuration options exactly as specified by WordPress:\n\n \n \n\nThat's it! The post type is now created.\n\n3. Add a README\n\nIt is strongly recommended to create a README.md file within each custom post type folder, with a short description of what this post type is for.\n","id":28},{"path":"/documentation/wordpress/custom-taxonomies","title":"","date":"","content":"---\ntitle: Custom Taxonomies\nweight: 51\nmenu:\n  main:\n    parent: WordPress\n    weight: 51\n---\n","id":29},{"path":"/documentation/wordpress/page-templates","title":"Page Templates","weight":"52","menu":"menu:","  main":" main:","    parent":"   parent: WordPress","    weight":"   weight: 52","content":"\nAll template files can be found under the theme root, in the templates directory.\n\nBy default, the following standard WordPress templates are included. These templates follow the normal WordPress Template Hierarchy, and work in exactly the same way:\n404.php\narchive.php\nhome.php\nindex.php\npage.php\nsingle.php\n\nBy default, the following custom page template is also included:\nplugin-inactive.php - This is displayed when the Flynt plugin is disabled.\n\nConfiguring Page Templates\n\nEach PHP template within the templates directory works in exactly the same way. The template takes a simple JSON configuration file, and using the Flynt Core plugin, parses and renders this into HTML.\n\nBy default, the JSON template configuration files are in config/templates.\n\nThese configuration files contain an overview of which areas and components are loaded into the template.\n\nTake config/templates/default.json as an example. This template calls the MainLayout component and registers one area: mainTemplate. Within mainTemplate, three additional areas are defined: mainHeader, pageComponents, and mainFooter.\n\n \n             \n          ],\n          \"pageComponents\": [\n             \n             \n          ],\n          \"mainFooter\": []\n         \n       \n    ]\n   \n \n","id":30},{"path":"/resources/contributing","title":"Contribution Guidelines","weight":"91","menu":"menu:","  main":" main:","    parent":"   parent: Resources","    weight":"   weight: 91","content":"\nPlease submit clarifications and improvements to the documentation! If it's just a small fix, open a PR. If it's something major, please file an issue for discussion first.\n\nTitles and Headers\n\nAll page titles and headers are written in \"Title Case\".\n\n The Quick Brown Fox Jumps Over the Lazy Dog and Demonstrates Title Case to the Reader.\n\n Use American English\n\nUse the standard American English spelling rules.\n\nAvoid the First Person (\"I\" and \"We\")\n\nWhere possible, do not use \"I\", or \"we\". This tends to lead to more concise, clearer phrasing.\n\n Explain Abbreviations\n\nIf it is necessary to use an abbreviation, write out the full text the first time that it is used. After this, the abbreviation can be used on its own.\n\nFor example: Advanced Custom Fields (ACF) is a plugin for Wordpress. ACF can be used to...\n\nAvoid Contractions\n\nDo not write \"it's\", \"they've\". Write \"it is\", \"they have\".\n\n Test All Code Snippets\n\nPlease make sure all code snippets are tested and will definitely work.\n\nTense: Avoid using '-ing'\n\nWhere possible, do not add '-ing' to verbs. Rather than \"adding\", \"changing\" - use \"add\" and \"change\".\n","id":31},{"path":"/resources/faq","title":"Frequently Asked Questions (FAQ)","weight":"90","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: Resources","    name":"   name: FAQ","    weight":"   weight: 90","content":"\n!-- TODO: Remove most of these questions (remove negative 'do i have to' language) and add a prompt for readers to go ask us questions (We don't know what the genuine frequently asked questions are yet)  --\n\nWhat's Timber?\nTimber combines the simple readability of the Twig template engine, and combines it with an object oriented, consistent approach to Wordpress posts, images, terms, users and more.\n\nTo find out more about Timber's functionality, we strongly recommend reading through the official Timber documentation.\n\n Do I have to use Timber and Twig?\n\nNo, this is just our personal recommendation. You can easily change this with the renderComponent filter. Learn how here.\n\nDo I have to use Stylus?\n\nNo, this is just our personal recommendation. You can use plain CSS without needing to change anything, or setup your pre-processor of choice with Gulp. Learn more here.\n\n What's Rupture?\n\nRupture is a simple utility for working with media queries in stylus. It takes advantage of Stylus block mixins to provide a series of useful helpers that make using breakpoints clean and intuitive. You can read more on their official website.\n\nOf course, as with everything else - you do not have to use this, but we strongly recommend it!\n\nDo I have to use Custom Elements to write JavaScript?\n\nNo, this is just our personal recommendation. You can author your JavaScript however you wish!\n\n Do I have to use Advanced Custom Fields (ACF)?\n\nNo, but this is very strongly recommended.\n\nbr\n\na href=\"/add-link\" class=\"source-note\"Have questions that are not answered in our FAQ? Please let us know! Leave an issue (or pull request!) in the Flynt Theme Github repo./a\n","id":32},{"path":"/resources/glossary","title":"Glossary","weight":"92","menu":"menu:","  main":" main:","    parent":"   parent: Resources","    weight":"   weight: 92","content":"\nArea\nSince components are self-contained, areas provide a way to stack our building-blocks together. An area is simply a location within a component where it is possible to add other components.\n\ndiv class=\"alert alert-steps\"\n  h2Next Steps/h2\n\n  pThat's all there is to know! We can now get started with building our first component./p\n\n  pa href=\"hello-world.md\" class=\"btn btn-primary\"Get started/a/p\n/div\n\n Kebab case\nLowercase with hyphens to separate words. For example: my-variable\n","id":33},{"path":"/search","title":"","date":"","content":"---\ntitle: Search\ntype: \"page\"\nlayout: \"search\"\n---\n","id":34},{"path":"/tutorials/adding-assets","title":"\"5. Adding Assets to a Component\"","weight":"24","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 24","content":"\ndiv class=\"alert\"\n  h3This tutorial covers:/h3\n  ul\n    listronga href=\"#5-1-adding-styles\"5.1 Adding Styles/a/strong/li\n    listronga href=\"#5-2-adding-scripts\"5.2 Adding Scripts/a/strong/li\n    listronga href=\"#5-3-adding-and-registering-dependencies\"5.3 Adding and Registering Dependencies/a/strong/li\n    listronga href=\"#5-4-adding-static-assets\"5.4 Adding Static Assets/a/strong/li\n  /ul\n/div\n\n5.1 Adding Styles\nEach component can have a self-contained style file. By default, Flynt supports vanilla CSS files, and the pre-processor Stylus. In this tutorial we will use Stylus.\n\nIf you do not like Stylus or vanilla CSS, you can learn how to switch the styling language here.\n\nTo get started, create Components/SliderPosts/style.styl and add the styles below:\n\n[is='flynt-post-slider']\n  *,\n  *:before,\n  *:after\n    box-sizing: border-box\n\n  .slider\n    center(1200px)\n\n    &-title\n      color: 74afad\n\n    &-image\n      display: block\n      width: 100%\n\n    &-showing\n      color: #558c89\n\nBefore these styles will show up, we need to enqueue our stylesheet.\n\nOpen Components/SliderPosts/functions.php and add the following code below the component namespace:\n\nuse Flynt\\Features\\Components\\Component;\n\nThen, at the bottom, add the code below to enqueue the stylesheet:\n\naddaction('wpenqueue_scripts', function ()  );\n\nWith Component::enqueueAssets we are telling our component to look for any style or script file within the component folder and enqueue it. You can read more in the Component Feature section.\n\nIn summary, the Components/SliderPosts/functions.php file now looks like the following:\n\n  <?php\n  namespace Flynt\\Components\\SliderPosts;\n\n  use Flynt\\Helpers\\Component;\n\n  add_filter('Flynt/addComponentData?name=SliderPosts', function ($data)  );\n\n  addaction('wpenqueue_scripts', function ()  );\n\nRefresh your page and you will now see our new styles.\n\nThat's it! Though there are a few more recommendations to keep in mind:\n\nEach component is uniquely identified with the is attribute. We use this for both styling and scripting, as you will see below. All styles are scoped within this component identifier.\nAt the core of the Flynt philosophy is reusability and scalability. As such, we strongly recommend following the maintainableCSS guidelines.\n\n5.2 Adding Scripts\nJust as with our styles, scripts live in our component folder and are completely self contained.\n\nCreate Components/SliderPosts/script.js and add the following code:\n\nclass SliderPosts extends window.HTMLDivElement  \n \n\nwindow.customElements.define('flynt-post-slider', SliderPosts,  )\n\nThis is our basic recommended JavaScript Custom Element starting template. It is written in ES2015 (ES6), and will be compiled to ES5 using Babel.\n\np class=\"source-note\"Before continuing we strongly recommended reading a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements\"Google's Getting Started Primer for Custom Elements/a. However, we will build upon this template in the coming sections./p\n\nIf you are not comfortable with Custom Elements or ES2015 (ES6), we do not force you to adopt this for your JavaScript (only strongly recommend it). At a basic level, the component script.js file will always be copied into the matching dist folder. You are free to write the JavaScript within it as you wish.\n\n 5.3 Adding and Registering Dependencies\nIn order to turn our images into a slider, we'll use the Flynt CLI to add Slick Carousel to the component.\n\nOpen the terminal, navigate to the project folder and run this command to install Slick:\n\nflynt add slick-carousel\n\nNow we need to import this dependency into our component.\n\nFirst, we will let Flynt know which scripts and styles from slick need copying into the build/vendor folder.\n\nDo this by adding the code below to the top of Components/SliderPosts/script.js:\n\nimport 'file-loader?name=vendor/slick.js!slick-carousel'\nimport 'file-loader?name=vendor/slick.css!slick-carousel/slick/slick.css'\n\nNow that the files are copied to dist/vendor we need to enqueue these assets.\n\nOpen Components/SliderPosts/functions.php and enqueue the dependencies by modifying the enqueueAssets function to match the below:\n\naddaction('wpenqueue_scripts', function ()  );\n\nGreat! All that is left is modify the connectedCallback function to initialize the plugin.\n\nOpen Components/SliderPosts/script.js and update the contents to match the following:\n\nimport 'file-loader?name=vendor/slick.js!slick-carousel'\nimport 'file-loader?name=vendor/slick.css!slick-carousel/slick/slick.css'\n\nclass SliderPosts extends window.HTMLDivElement  \n\n  resolveElements ()  \n\n  connectedCallback ()  )\n   \n \n\nwindow.customElements.define('flynt-post-slider', SliderPosts,  )\n\n5.4 Adding Static Assets\nSometimes we need static assets, such as icons, that do not come directly from the user in the back-end.\n\nTo implement this, create an asset directory in the SliderPosts component directory. Then, download and add downloadIcon.svg (available here) to the new asset directory.\n\n| flynt-theme\n|── Components\n    └── SliderPosts\n       └── Assets/\n          └── downloadIcon.svg\n\nWhen flynt is running, any file (other than JavaScript, Stylus, SASS, and LESS) placed into this folder will be automatically copied to the corresponding folder within dist.\n\nIn our case, downloadIcon.svg will be copied to dist/Components/SliderPosts/Assets/downloadIcon.svg.\n\nFor caching purposes, all static assets are automatically revisioned by gulp (for example, downloadIcon.svg → downloadIcon-d41d8cd98f.svg).\n\nAs such, to include assets in a component, it is necessary to use the requireAssetUrl function. This is a utility function provided by the Asset Util. You can read more about this in the Util Asset section.\n\nOpen Components/SliderPosts/functions.php. At the top of the file, we need to use our Asset helper:\n\n<?php\nnamespace Flynt\\Components\\SliderPosts;\n\nuse Flynt\\Utils\\Asset;\n//...\n\nWe will then add the image URL to our component data by calling the requireAssetUrl function with the path to our image:\n\n add_filter('Flynt/addComponentData?name=SliderPosts', function ($data)  );\n\nIn summary, the Components/SliderPosts/functions.php should now match the code below:\n\n<?php\nnamespace Flynt\\Components\\SliderPosts;\n\nuse Flynt\\Utils\\Asset;\nuse Flynt\\Features\\Components\\Component;\n\nadd_filter('Flynt/addComponentData?name=SliderPosts', function ($data)  );\n\naddaction('wpenqueue_scripts', function ()  );\n\nWe now have the icon URL available in our component data. Lets use what we learnt in the previous steps to add this icon to our template, along with some styling for the icon:\n\nIn Components/SliderPosts/index.twig:\n\ndiv is=\"flynt-post-slider\"\n  div class=\"slider\"\n    h1 class=\"slider-title\"  /h1\n    div class=\"slider-items\"\n       \n        div class=\"slider-item\"\n          h2  /h2\n          div class=\"slider-image-wrapper\"\n            a class=\"slider-icon\" href=\"  \" target=\"_blank\"\n              img src=\"  \" alt=\"Download\"\n            /a\n            img src=\"  \" alt=\"  \"\n          /div\n        /div\n       \n    /div\n  /div\n  div class=\"slider-meta\"\n    p class=\"slider-showing\"  /p\n  /div\n/div\n\nIn Components/SliderPosts/style.styl:\n\n[is='flynt-post-slider']\n  .slider\n    center(1200px)\n\n    &-title\n      color: 74afad\n\n    &-image\n      display: block\n      width: 100%\n\n    &-showing\n      color: #558c89\n\n    &-image-wrapper\n      position: relative\n\n    &-icon\n      bottom: 20px\n      display: block\n      height: 30px\n      position: absolute\n      right: 20px\n      width: 30px\n\nRefresh the front-end and you will see that we are done!\n\ndiv class=\"alert alert-steps\"\n  h2Next Steps/h2\n\n  pThis concludes the \"Getting Started\" series! In the last step we'll recap what we've achieved and recommend where to go from here./p\n\n  pa href=\"next-steps.md\" class=\"btn btn-primary\"Go to Section 7/a/p\n/div\n","id":35},{"path":"/tutorials/hello-world","title":"\"2. Hello World\"","weight":"21","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 21","content":"\ndiv class=\"alert alert-info\"\n  strongBefore you begin this tutorial, make sure you first follow the a href=\"../../README.md\"quick start guide/a and have your local environment up and running.\n  /strong\n/div\n\ndiv class=\"alert\"\n  h3This tutorial covers:/h3\n  ul\n    listronga href=\"#21-configuring-page-templates\"1.1 Configuring Page Templates/a/strong/li\n    listronga href=\"#22-creating-your-component\"1.2 Creating your Component/a/strong/li\n    listronga href=\"#23-rendering-your-component\"1.3 Rendering Your Component/a/strong/li\n  /ul\n/div\n\n2.1 Configuring Page Templates\nAll template files in Flynt can be found under the theme root, in the templates directory. You can learn more about how Flynt handles page templates here.\n\nFor this tutorial we will be using the default template/page.php template. This file contains only one line of code:\n\nFlynt\\echoHtmlFromConfigFile('default.json');\n\npa href=\"../../core/api/flynt.mdechogethtmlfromconfig\" class=\"source-note\"The source of this function can be found in the Flynt Core plugin./a/p\n\nFor now, it is only important to know that our template config is actually loaded from config/templates/default.json.\n\nHere we store our default page layout:\n\n \n    ],\n    \"mainTemplate\": [\n       \n    ]\n   \n \n\nFor a detailed look at how these template configurations work, you can read more here.\n\n2.2 Creating your Component\nAll components are located in the Components directory. Create a new folder in this directory with the name SliderPosts.\n\nFlynt uses Twig in conjunction with Timber for view templates. To add a template for your component, create Components/SliderPosts/index.twig. Your folder structure should now be:\n\nflynt-theme/\n└── Components/\n   └── SliderPosts/\n       └── index.twig\n\nSince the end goal is to make this component an interactive slider, for now we'll add some dummy data to our view template. Open Components/SliderPosts/index.twig and enter the following:\n\ndiv is=\"flynt-post-slider\"\n  div class=\"slider\"\n    h1 class=\"slider-title\"Hello World!/h1\n  /div\n/div\n\nDone! Next we need to render the component to the page.\n\n 2.3 Rendering Your Component\n\nFirst we will create a new area for our SliderPosts component.\n\nOpen config/templates/default.json and add a new area with the key pageComponents:\n\n \n          ]\n         \n       \n    ]\n   \n \n\nNow that we have registered the area we need to output it.\n\nOpen the Components/MainTemplate/index.twig and replace the_content() with the pageComponents area:\n\ndiv is=\"flynt-main-template\"\n  div class=\"pageWrapper\"\n    div class=\"mainHeader\"\n        \n    /div\n    main class=\"pageComponents\"\n        \n    /main\n  /div\n/div\n\nVoilà! We're done.\n\nComponents defined within the pageComponents area in the default.json page template will now be output where the area is called. Load the front-end of your site and you will see your new component.\n\ndiv class=\"alert alert-steps\"\n  h2Next Steps/h2\n\n  pIn the next section we will tackle making this content dynamic by adding user-editable content fields. We will then learn to manipulate this data before we pass it to the view and render it./p\n\n  pa href=\"using-acf.md\" class=\"btn btn-primary\"Learn to add fields/a/p\n/div\n","id":36},{"path":"/tutorials/modify-data","title":"\"4. Modifying Component Data\"","weight":"23","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 23","content":"\ndiv class=\"alert\"\n  h3This tutorial covers:/h3\n  ul\n    listronga href=\"#4-1-using-addcomponentdata-and-functionsphp\"Using codeaddComponentData/code and codefunctions.php/code/strong/a/li\n  /ul\n/div\n\n4.1 Using addComponentData and functions.php\n\nOur component is now functional, but looking at our existing view template, we are still left with hard-coded text:\n\ndiv is=\"flynt-post-slider\"\n  !-- ... code ... --\n  div class=\"slider-meta\"\n    p class=\"slider-showing\"Showing    posts./p\n  /div\n/div\n\nThe ideal would be to make this text dynamic, but still let the editor insert the postsPerPage number where appropriate. Lets implement this!\n\nFirst, lets create a new field for the SliderPosts component named postsPerPageText.\n\nUpdate Components/SliderPosts/fields.json to match the following:\n\n ,\n     ,\n     ,\n  ]\n \n\nTo combine our text with the date, we will now need to make use of the addComponentData filter.\n\nThis is the last entry point where it is possible to modify the data of a particular component.\n\nSince it is component specific, we place this filter into the functions.php file of a component.\n\np class=\"source-note source-note--info\"This file follows the original Wordpress codefunctions.php/code functionality, only re-organized to match Flynt's modular structure. a href=\"https://codex.wordpress.org/FunctionsFileExplained\" target=\"_blank\"Read more here/a/p\n\nOpen the backend interface for your page and add the following content to the \"Posts Per Page Text\" field and hit update:\n\n\"Showing $postsPerPage posts.\"\n\nNow we'll take the value and replace the $postsPerPage string with the postsPerPage data we passed through our data filter.\n\nFirst create Components/SliderPosts/functions.php and add the code below:\n\n  <?php\n  namespace Flynt\\Components\\SliderPosts;\n\n  add_filter('Flynt/addComponentData?name=SliderPosts', function ($data)  );\n\nIt is important to note here that it is necessary to append ?name= to the filter, passing the target component name as a parameter to our addComponentData filter.\n\nTo finish up, update the view template Components/SliderPosts/index.twig with the code below:\n\ndiv is=\"flynt-post-slider\"\n  div class=\"slider\"\n    h1 class=\"slider-title\"  /h1\n    div class=\"slider-items\"\n       \n        div class=\"slider-item\"\n          h2  /h2\n          img src=\"  \" alt=\"  \"\n        /div\n       \n    /div\n  /div\n  div class=\"slider-meta\"\n    p class=\"slider-showing\"  /p\n  /div\n/div\n\nWe're done! Our editor can now change and re-word the text as they wish, adding in the \"posts per page\" data wherever they need without \"hard-coding\" it.\n\ndiv class=\"alert alert-steps\"\n  h2Next Steps/h2\n\n  pWe have covered the core concepts of building a dynamic content driven component. What's missing is front-end styling. To round up the series we'll dive into assets and how we require styles, scripts, and images./p\n\n  pa href=\"adding-assets.md\" class=\"btn btn-primary\"Learn how to add assets/a/p\n/div\n","id":37},{"path":"/tutorials/next-steps","title":"\"6. Next Steps\"","weight":"25","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 25","content":"\n6. Next Steps\n\n!-- TODO: Add download zip link for the finished tutorial module. --\n\nCongratulations on building your first component! In this \"Getting Started\" series we have walked through the key steps in making a reusable component.\n\ndiv class=\"alert\"\n  h2What to Read Next/h2\n  pstronga href=\"../../acf/flexible-content.md\"Take Flynt further and learn how to use ACF Flexible Content field./a/strong/p\n  h4Or:/h4\n  ul\n    listronga href=\"../../faq.md\"Read through the Frequently Asked Questions/a/strong/li\n    listronga href=\"../../core/README.md\"Dig into the Flynt Core plugin documentation/a/strong/li\n  /ul\n/div\n\na href=\"/add-link\" class=\"source-note\"Have questions that are not answered in our documentation? Please let us know! Leave an issue (or pull request!) in the Flynt Theme Github repo./a\n","id":38},{"path":"/tutorials/setup","title":"\"1. Setup\"","weight":"20","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 20","content":"\nTo get started, clone the flynt-theme and checkout the tutorial branch.\n\ngit clone -b tutorial-setup https://github.com/flyntwp/theme.git\n\nThen use the Flynt CLI to setup the project:\n\nflynt setup\n\n!-- TODO: Add link / text about actually doing all of the required local setup steps. e.g. Set up MAMP --\n","id":39},{"path":"/tutorials/using-acf","title":"\"3. Using Advanced Custom Fields (ACF)\"","weight":"22","menu":"menu:","  main":" main:","    parent":"   parent: Building your first Component","    weight":"   weight: 22","content":"\ndiv class=\"alert alert-info\"\n  strongA requirement of this tutorial is using the Wordpress Plugin a href=\"https://www.advancedcustomfields.com/\"Advanced Custom Fields (ACF)/a. Please make sure this is installed and enabled before continuing./strong\n/div\n\ndiv class=\"alert\"\n  h3This tutorial covers:/h3\n  ul\n    listronga href=\"#3-1-adding-acf-fields\"3.1 Adding ACF Fields/a/strong/li\n    listronga href=\"#3-2-adding-a-field-group\"3.2 Adding a Field Group/a/strong/li\n    listronga href=\"#3-3-displaying-field-content\"3.3 Displaying Field Content/a/strong/li\n    listronga href=\"#3-4-understanding-the-flynt-data-flow\"3.4 Understanding the Flynt Data Flow/a/strong/li\n    listronga href=\"#3-5-taking-our-component-further\"3.5 Taking our Component Further/a/strong/li\n  /ul\n/div\n\n3.1 Adding ACF Fields\nAdvanced Custom Fields (ACF) is a Wordpress plugin to make adding custom meta fields easy and intuitive, with a straight-forward API and seamless integration into the back-end of Wordpress. With Flynt, ACF is used to add user-editable fields to components.\n\nTo get started, add a single ACF text field to the SliderPosts component.\n\nCreate Components/SliderPosts/fields.json and add the code below:\n\n \n  ]\n \n\nThe folder structure will now resemble the following:\n\nflynt-theme/\n└── Components/\n   └── SliderPosts/\n       └── index.twig\n       └── fields.json\n\nThat's all we need to do to register a new field for a component.\n\nIf you are already familiar with ACF, you will notice that these field options (e.g. \"required\") are exactly the same as those provided natively by ACF. This is the case for all fields we author with Flynt's fields.json.\n\nBefore this field will be visible in the back-end, we still need to define in which situations these fields should be available. We will do this in the next section by adding a new \"Field Group\".\n\na href=\"https://github.com/bleech/wp-starter-snippets\" class=\"source-note source-note--info\"ACF offers around 20 different field types. To make the process of authoring these fields simpler, install our fields.json snippets for Atom or Sublime Text./a\n\ndiv class=\"alert\"\n  pYou can see the full list of available fields and their options in the stronga href=\"https://www.advancedcustomfields.com/resources/field-types\"official ACF documentation/a/strong./p\n\n  pWe also have documentation on how best to use several of the ACF Pro field types with Flynt:/p\n\n  br\n\n  ul\n    listronga href=\"../theme-development/advanced/flexible-content.md\"Using the ACF Pro \"Flexible Content\" Field/a/strong/li\n    listronga href=\"../theme-development/advanced/repeaters.md\"Using the ACF Pro \"Repeater\" Field/a/strong/li\n    listronga href=\"../theme-development/advanced/options-page.md\"Using the ACF Pro \"Options\" Page/a/strong/li\n  /ul\n/div\n\n3.2 Adding a Field Group\n\nAll field group configuration files can be found in the config/fieldGroups directory. For this tutorial we will modify the default pageComponents configuration.\n\nOpen config/fieldGroups/pageComponents.json and replace the contents with the following:\n\n \n    ]\n  ]\n \n\nIn the \"fields\" array, we specifically pull in the fields from our SliderPosts component. If we also had more components, we could also pull these into our Page Components group. For example:\n\n \n\nBelow this, we are also setting the location where the field group should be displayed to the \"Page\" post type.\n\n\"location\": [\n  [\n     \n  ]\n]\n\na class=\"source-note source-note--info\" href=\"https://www.advancedcustomfields.com/resources/custom-location-rules/\"\nAs with the field settings, we are writing our location rules using the same configuration options as Advanced Custom Fields. We strongly recommend reading more about these rules in the official ACF documentation./a\n\nThat's it! Navigate to the backend of Wordpress and create a new page. At the bottom, you'll now see a section for your SliderPosts component with a field labeled \"Title\".\n\nAdd the text \"Our Featured Posts\" into the title field and save the page.\n\nNext, we'll move on to displaying this content on the front-end.\n\n 3.3 Displaying Field Content\nWe can now display the title in our front-end Twig template.\n\nOpen Components/SliderPosts/index.twig and update it with the following:\n\ndiv is=\"flynt-post-slider\"\n  div class=\"slider\"\n    h1 class=\"slider-title\"  /h1\n  /div\n/div\n\nThat's all there is to it! All of the component's fields are automatically available in the component's view.\n\n3.4 Understanding the Flynt Data Flow\n\nAt this point it is important to understand how the Flynt Core plugin is passing this data to the view. Timber uses the data passed to the template, but before this point it is still possible to interact with and add to the data. This can be understood much easier with the flowchart below:\n\npre class=\"language- flowchart\"\n  code\n  +------------------------------+\n  |    Template Configuration    |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |        Add Custom Data       |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |       addComponentData       |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |        Rendered HTML         |\n  +------------------------------+\n  /code\n/pre\n\n!-- <pre class=\"language- flowchart\"\n  code\n  +------------------------------+\n  |    Template Configuration    |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |         Parent Data          |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |         Custom Data          |\n  +--------------+---------------+\n                 |\n                 |\n  +--------------v---------------+\n  |       addComponentData       |\n  +--------------+---------------+\n                 |\n       Pass data to template\n                 |\n  +--------------v---------------+\n  |        Rendered HTML         |\n  +------------------------------+\n  /code\n/pre --\n\na href=\"/add-link\" class=\"source-note\"To dig into this more, read through the full flowchart in the Flynt Core plugin documentation./a\n\n 3.5 Taking our Component Further\nNow we want to pull the featured image from a list of posts selected by the user.\n\nOpen Components/SliderPosts/fields.json and add a post object field to the component:\n\n ,\n     \n  ]\n \n\nTo continue, create a few dummy posts and add a featured image to each one. You can grab some sample images from Unsplash.\n\nNow open up your page in the backend and you will now see our new field, with the label \"Posts\". Select your dummy posts and save the page.\n\nIn Components/SliderPosts/index.twig, we can now loop through our posts and output the title and featured image for each one:\n\ndiv is=\"flynt-post-slider\"\n  div class=\"slider\"\n    h1 class=\"slider-title\"  /h1\n    div class=\"slider-items\"\n       \n        div class=\"slider-item\"\n          h2  /h2\n          img src=\"  \" alt=\"  \"\n        /div\n       \n    /div\n  /div\n/div\n\nHere, Timber's default Wordpress image handling provides us with our featured image data directly with the use of post.thumbnail. To quote the Timber documentation:\n\n Automatically, Timber will interpret images attached to a post’s thumbnail field (“Featured Image” in the admin) and treat them as TimberImages.\n\nIf you are not familiar with Timber, we recommend reading more about this in their documentation.\n\ndiv class=\"alert alert-steps\"\n  h2Next Steps/h2\n\n  pWe now have a simple component that takes data from our fields and outputs them on the front-end! But what if we want to pull other data in our component? The next section explores passing additional data to our component./p\n\n  pa href=\"modify-data.md\" class=\"btn btn-primary\"Learn to add component data/a/p\n/div\n","id":40}]